/**
 * @author Brayan Fuentes and Curtis Nishihira
 * Date: April 9, 2020
 * Purpose: To read the file and add the words into a treemap and setting their values to 0. Then read another file 
 * with characters and values into a treemap that will be used later to calculate the value of the each word from the first file
 * Inputs: No user input
 * Output: Will print onto the console each word from the words.txt and then their value next to them as well as the time it took for each part of this program
 * to run.  
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.TreeMap;
import java.io.IOException;
import java.util.Iterator;

public class Treemap {

	public static void main(String[] args)
	{
		long time1,time2,time3,time4;
		time1 = System.nanoTime();
		String line;
		try
		{
			//puts the words into the treemap and sets their values to 0
			System.out.println("Using TreeMap");
			TreeMap <String, Integer> one = new TreeMap<String,Integer>();
			BufferedReader reader0 = new BufferedReader(new FileReader("words.txt"));
			while((line = reader0.readLine())!= null)
			{
				one.put(line,0);
			}		
			//Gets the current time in nano-seconds and it will print onto the console the total time it took the file to be loaded into a treemap with all their values being 0.
			time2 = System.nanoTime();
			System.out.println("Time for loading into map: " + (time2-time1)+" nano-seconds.");
			time3= System.nanoTime();
			TreeMap<Character, Integer> scrambleValues = new TreeMap<Character, Integer>();
			BufferedReader reader = new BufferedReader(new FileReader("values.txt"));
			BufferedReader reader2 = new BufferedReader(new FileReader("words.txt"));
			//reads the values file and splits the line into two parts a char and an int 
			while((line = reader.readLine()) != null)
			{
				String[] parts = line.split(" ");
				scrambleValues.put(parts[0].charAt(0), Integer.parseInt(parts[1]));
			}
			
			TreeMap<String, Integer> map = new TreeMap<String, Integer>();		
			//The bufferedreader will read each string, but it for each string it will go character to character recording the values of each and adding it to sum.
			//Then it will load the string and the sum that it has obtained in the for loop into a treemap
			while((line =reader2.readLine()) !=null)
			{
				int sum = 0;
				for(int i =0; i < line.length();i++)
				{
					line = line.toUpperCase();
					char x = line.charAt(i);
					sum += scrambleValues.get(x);
				}
				line = line.toLowerCase();
				map.put(line, sum);
			}
			//This will iterate through the tree map printing though the treemap printing onto the console the word and its value.
			Iterator<String> b = map.keySet().iterator();
			Iterator<Integer> c = map.values().iterator();
			while(b.hasNext() && c.hasNext())
			{
				System.out.println(b.next()+ " ---> " + c.next());
			}
			//Gets the current time in nano-seconds and it will print onto the console the total time it took the file to be loaded into a treemap with all their values.
			time4 = System.nanoTime();
			System.out.println("The time for searching map: " + (time4-time3)+" nano-seconds.");
			reader0.close();
			reader.close();
			reader2.close();
		}
		catch(IOException e)
		{
			System.out.println("Well something happened. Just not the intended thing.");
		}
	}
	
}
